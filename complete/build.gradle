import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "groovy"
    id "org.grails.grails-web"
    id "org.grails.grails-gsp"
    id "com.github.erdi.webdriver-binaries"
    id "war"
    id "idea"
    id "com.bertramlabs.asset-pipeline"
    id "application"
    id "eclipse"
    id "org.ajoberstar.grgit" version "5.2.2"
}

group = "example.grails"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core/" }
}

configurations {
    all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details->
            if (details.requested.group == 'org.seleniumhq.selenium') {
                details.useVersion('4.19.1')
            }
        }
    }
}

dependencies {
    implementation("org.grails:grails-core")
    implementation("org.grails:grails-logging")
    implementation("org.grails:grails-plugin-databinding")
    implementation("org.grails:grails-plugin-i18n")
    implementation("org.grails:grails-plugin-interceptors")
    implementation("org.grails:grails-plugin-rest")
    implementation("org.grails:grails-plugin-services")
    implementation("org.grails:grails-plugin-url-mappings")
    implementation("org.grails:grails-web-boot")
    implementation("org.grails.plugins:gsp")
    implementation("org.grails.plugins:hibernate5")
    implementation("org.grails.plugins:scaffolding")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-tomcat")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    compileOnly("io.micronaut:micronaut-inject-groovy")
    console("org.grails:grails-console")
    runtimeOnly("com.bertramlabs.plugins:asset-pipeline-grails:4.3.0")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("org.apache.tomcat:tomcat-jdbc")
    runtimeOnly("org.fusesource.jansi:jansi:1.18")
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("org.grails:grails-gorm-testing-support")
    testImplementation("org.grails:grails-web-testing-support")
    testImplementation("org.grails.plugins:geb")
    testImplementation("org.seleniumhq.selenium:selenium-api:4.19.1")
    testImplementation("org.seleniumhq.selenium:selenium-remote-driver:4.19.1")
    testImplementation("org.seleniumhq.selenium:selenium-support:4.19.1")
    testImplementation("org.spockframework:spock-core")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-chrome-driver:4.19.1")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-firefox-driver:4.19.1")
    testRuntimeOnly("org.seleniumhq.selenium:selenium-safari-driver:4.19.1")
    testImplementation("io.micronaut:micronaut-http-client")

}

application {
    mainClass.set("example.grails.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

/**
 * Add build info to the grails.build.info file.
 */
project.gradle.projectsEvaluated {
    buildProperties.doLast {
        // Find the right file
        File grailsBuildInfoFile = it.outputs.files.files.find { File file ->
            file.name == 'grails.build.info'
        } as File
        if (!grailsBuildInfoFile) {
            return // No need to continue if the file is not there
        }
        Properties properties = new Properties()
        // Read properties from the file
        grailsBuildInfoFile.withInputStream { InputStream inputStream ->
            properties.load(inputStream)
        }
        // Get the current date and time in UTC
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"))
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        // Add new properties from various sources
        properties.setProperty('build.time', now.format(formatter)) // <1>
        // Get a System property
        properties.setProperty('build.java.version', System.getProperty('java.version'))
        // Get the host name where the build was created
        properties.setProperty('build.host', InetAddress.localHost.hostName)
        // Add properties set by your CI (in this case CircleCI)
        Map<String, String> env = System.getenv()
        if (env.CIRCLE_BUILD_NUM) {
            properties.setProperty('build.number', env.CIRCLE_BUILD_NUM) // <2>
            properties.setProperty('build.git.revision', env.CIRCLE_SHA1)
            properties.setProperty('build.git.branch', env.CIRCLE_BRANCH)
        } else {
            // Get the commit id (aka hash) of HEAD
            String gitCommitId = grgit.head().id
            properties.setProperty('build.git.revision', gitCommitId)
            properties.setProperty('build.git.branch', grgit.branch.current().getName())
        }
        // Set more properties with Git commit information
        properties.setProperty('build.git.commit.user.email', grgit.head().author.email)
        properties.setProperty('build.git.commit.user.name', grgit.head().author.name)
        properties.setProperty('build.git.commit.message.full', grgit.head().fullMessage)
        // Write the properties back to the file
        grailsBuildInfoFile.withOutputStream { OutputStream outputStream ->
            properties.store(outputStream, null)
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
    systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
}
webdriverBinaries {
    if (!System.getenv().containsKey('CI')) {
        chromedriver '122.0.6260.0'
        geckodriver '0.33.0'
        edgedriver '110.0.1587.57'
    }
}
assets {
    minifyJs = true
    minifyCss = true
}
